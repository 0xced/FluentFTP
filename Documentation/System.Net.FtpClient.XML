<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Net.FtpClient</name>
    </assembly>
    <members>
        <member name="T:System.Net.FtpClient.FtpListItem">
            <summary>
            Parses MLST/MLSD and LIST formats
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseListListing(System.String)">
            <summary>
            Parses DOS and UNIX LIST style listings
            </summary>
            <param name="listing"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseMachineListing(System.String)">
            <summary>
            Parses MLST and MLSD formats
            </summary>
            <param name="listing"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.Parse(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Parses a given listing
            </summary>
            <param name="listing">The single line that needs to be parsed</param>
            <param name="type">The command that generated the line to be parsed</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.#ctor">
            <summary>
            Initializes an empty parser
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.#ctor(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Parses a given listing
            </summary>
            <param name="listing">The single line that needs to be parsed</param>
            <param name="type">The command that generated the line to be parsed</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseList(System.String[],System.Net.FtpClient.FtpListType)">
            <summary>
            Parses an array of list results
            </summary>
            <param name="items">Array of list results</param>
            <param name="type">The command that generated the list being parsed</param>
            <returns></returns>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Type">
            <summary>
            Gets the type of object (File/Directory/Unknown)
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Name">
            <summary>
            The file/directory name from the listing
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Size">
            <summary>
            The file size from the listing, default -1
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Modify">
            <summary>
            The last write time from the listing
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.RegexDosFile">
            <summary>
            Regular expression used for matching IIS DOS style file listings
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.RegexDosDirectory">
            <summary>
            Regular expression used for matching IIS DOS style directory listings
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.RegexUnixDirectory">
            <summary>
            Regular expression used for matching UNIX directory listings
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.RegexUnixFile">
            <summary>
            Regular expression used for matching UNIX file listings
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.RegexUnixLink">
            <summary>
            Regular expression used for matching UNIX symbolic link listings
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpResponseType">
            <summary>
            The type of response the server responded with
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.None">
            <summary>
            No response
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositivePreliminary">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveCompletion">
            <summary>
            Successs
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveIntermediate">
            <summary>
            Succcess
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.TransientNegativeCompletion">
            <summary>
            Temporary failure
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PermanentNegativeCompletion">
            <summary>
            Permanent failure
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataMode">
            <summary>
            The of data channel to be used
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataMode.Active">
            <summary>
            PORT Command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataMode.ExtendedActive">
            <summary>
            EPRT Command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataMode.Passive">
            <summary>
            PASV Command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataMode.ExtendedPassive">
            <summary>
            EPSV Command
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTransferMode">
            <summary>
            Transfer data over data channel in ASCII or binary.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpTransferMode.ASCII">
            <summary>
            Transfer data as ASCII
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpTransferMode.Binary">
            <summary>
            Transfer data as binary
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpListType">
            <summary>
            The list command to be used on the server
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListType.LIST">
            <summary>
            Standard hard to parse file listing
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListType.MLSD">
            <summary>
            Newer easier to parse file listing
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListType.MLST">
            <summary>
            Newer easier to parse file listing that returns info on a single
            object over the command channel (no data channel required)
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpCapability">
            <summary>
            Server features
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.EMPTY">
            <summary>
            Features haven't been loaded yet
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.NONE">
            <summary>
            This server said it doesn't support anything!
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MLST">
            <summary>
            Supports the MLST command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MLSD">
            <summary>
            Supports the MLSD command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.SIZE">
            <summary>
            Supports the SIZE command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MDTM">
            <summary>
            Supports the MDTM command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.REST">
            <summary>
            Supports download/upload stream resumes
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.EPSV">
            <summary>
            Supports the EPSV command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.EPRT">
            <summary>
            Supports the EPRT command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MDTMDIR">
            <summary>
            Supports retrieving modification times on directories
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpProtocolType">
            <summary>
            Indicate if we're using IPv4 or IPv6
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpProtocolType.IPV4">
            <summary>
            Use IPv4
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpProtocolType.IPV6">
            <summary>
            Use IPv6 (this is not used anywhere in the code as of right now). It's reserved
            for the future when IPv6 finally replaces IPv4
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpObjectType">
            <summary>
            File system object type
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.Directory">
            <summary>
            A directory.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.File">
            <summary>
            A file.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.Unknown">
            <summary>
            No idea.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTransferType">
            <summary>
            Indicates if the transfer in progress is an upload or a download
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpTransferType.Upload">
            <summary>
            The transfer is an upload.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpTransferType.Download">
            <summary>
            The transfer is a download.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpSslMode">
            <summary>
            Indicates the type of SSL connection to use, if any.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSslMode.None">
            <summary>
            Do not use SSL
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSslMode.Explicit">
            <summary>
            A SSL or TLS session is negotiated after the initial
            unencrypted connection, before credentials are sent.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSslMode.Implicit">
            <summary>
            SSL/TLS is implied upon the initial connection.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.ResponseReceived">
            <summary>
            ResponseReceived delegate
            </summary>
            <param name="status">Status number</param>
            <param name="response">Status message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpCommandChannel">
            <summary>
            The communication channel for the FTP server / used for issuing commands
            and controlling transactions.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannel">
            <summary>
            Base class for Ftp*Channel implementations
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnConnectionReady">
            <summary>
            Fire ConnectionReady event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnConnectionClosed">
            <summary>
            Fire ConnectionClosed event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnDisposed">
            <summary>
            Fire Disposed event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnInvalidSslCerticate(System.Net.FtpClient.FtpChannel,System.Net.FtpClient.InvalidCertificateInfo)">
            <summary>
            Fire the invalid ssl certificate event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.CheckCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Checks if a certificate is valid
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.AuthenticateConnection">
            <summary>
            Authenticates the SSL certificate. This should be called when the stream is switched over
            to encryption.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.Connect">
            <summary>
            Connect this channel
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.Disconnect">
            <summary>
            Disconnect the socket and free up any resources being used here
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.Dispose">
            <summary>
            Cleanup and release resources
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.ConnectionReady">
            <summary>
            Event is fired after a connection has been made
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.ConnectionClosed">
            <summary>
            Event is fired when Disconnect is called
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.Disposed">
            <summary>
            Event is fired when this object is disposed.
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.InvalidCertificate">
            <summary>
            Event is fired when an invalid SSL certificate is encountered.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.IsServerSocket">
            <summary>
            Indicates if this is an incomming (active) or outgoing channel (passive)
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslEnabled">
            <summary>
            Gets a value indicating if encryption is in use
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslPolicyErrors">
            <summary>
            Gets the SSL errors if there were any
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslCertificate">
            <summary>
            Gets the certificate associated with the current connection
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Socket">
            <summary>
            Connection
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.RecieveBufferSize">
            <summary>
            Default buffer size of the underlying socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SendBufferSize">
            <summary>
            Default buffer size of the underlying socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.LocalEndPoint">
            <summary>
            Local end point
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.RemoteEndPoint">
            <summary>
            Remote end point
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Connected">
            <summary>
            Indicates if there is an active connection
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ReadTimeout">
            <summary>
            Gets/Sets the read timeout
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.WriteTimeout">
            <summary>
            Gets/Sets the write timeout
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.NetworkStream">
            <summary>
            The base stream used for reading and writing the socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslAuthTargetHost">
            <summary>
            Gets the host to use for ssl certificate authentication
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SecurteStream">
            <summary>
            Gets a secure stream to the socket.
            Intended to be used with the AUTH SSL command
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.BaseStream">
            <summary>
            The base stream for reading and writing the socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.StreamReader">
            <summary>
            Used for easy reading from the socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Server">
            <summary>
            The FTP server to connect to
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Port">
            <summary>
            The port the FTP server is listening on
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCommandChannel.mCommandLock">
            <summary>
            Mutex used for locking the command channel while
            executing commands
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.LockCommandChannel">
            <summary>
            Acquire an exclusive lock on the command channel
            while executing/processing commands
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.LockCommandChannel(System.Int32)">
            <summary>
            Acquire an exclusive lock on the command channel
            while executing/processing commands 
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.UnlockCommandChannel">
            <summary>
            Release the exclusive lock held on the command channel
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OnResponseReceived(System.String,System.String)">
            <summary>
            Fires the response received event.
            </summary>
            <param name="status">Status code</param>
            <param name="response">Status message</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.ReadLine">
            <summary>
            Reads a line from the FTP channel socket. Use with discretion,
            can cause the code to freeze if you're trying to read data when no data
            is being sent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes off the socket
            </summary>
            <param name="buf"></param>
            <param name="offset"></param>
            <param name="size"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Write(System.Byte[])">
            <summary>
            Writes the specified byte array to the network stream
            </summary>
            <param name="buf"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified byte array to the network stream
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to the channel with the correct line endings.
            </summary>
            <param name="line">Format</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.WriteLine(System.String)">
            <summary>
            Writes a line to the channel with the correct line endings.
            </summary>
            <param name="line">The line to write</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Write(System.String,System.Object[])">
            <summary>
            Writes the specified data to the network stream in the proper encoding
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Write(System.String)">
            <summary>
            Writes the specified data to the network stream in the proper encoding
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.PollConnection">
            <summary>
            Attempts to check our connectivity to the server
            with using Socket.Poll
            </summary>
            <returns>True if connected, false otherwise</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.BeginExecute">
            <summary>
            Starts a new pipeline of commands
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.EndExecute">
            <summary>
            Executes all of the commands in the pipeline list
            </summary>
            <returns>An array of FtpCommandResult objects. The order of the objects relates
            to the order that commands were executed.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.CancelPipeline">
            <summary>
            Cancels the current pipeline
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Execute(System.String[])">
            <summary>
            Pipeline the given commands on the server
            </summary>
            <param name="commands">If null value is passed, no attempt to execute is made but an attempt
            to performan a response read will be made regardless.</param>
            <returns>An array of FtpCommandResults</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Execute(System.String,System.Object[])">
            <summary>
            Executes a command on the server
            </summary>
            <param name="cmd"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Execute(System.String)">
            <summary>
            Executes a command on the server. If there is a pipeline in progress
            the command is queued and true is returned.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.ReadResponse">
            <summary>
            Reads and parses the response a command that was executed. Do not call this
            unless you just executed a command, will cause code to freeze waiting for the
            server to send data that is never comming.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Connect(System.String,System.Int32)">
            <summary>
            Open a connection
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Open a connection
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Connect(System.Net.IPEndPoint)">
            <summary>
            Open a connection
            </summary>
            <param name="ipep"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.HasCapability(System.Net.FtpClient.FtpCapability)">
            <summary>
            Checks if the server supports the specified capability
            </summary>
            <param name="cap"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.RemoveCapability(System.Net.FtpClient.FtpCapability)">
            <summary>
            Removes the specified capability from the list
            </summary>
            <param name="cap"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.LoadCapabilities">
            <summary>
            Loads the capabilities of this server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.SetTransferMode(System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Set the transfer mode for the data channel
            </summary>
            <param name="xfer"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OpenDataChannel">
            <summary>
            Opens a passive/binary data channel
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OpenDataChannel(System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens a passive channel of the specified FtpTransferMode
            </summary>
            <param name="xfer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OpenDataChannel(System.Net.FtpClient.FtpDataMode)">
            <summary>
            Opens the specified data channel type with a binary transfer mode
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OpenDataChannel(System.Net.FtpClient.FtpDataMode,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens a data channel setup by the parameters specified
            </summary>
            <param name="mode"></param>
            <param name="xfer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OnDataChannelDisconnected(System.Net.FtpClient.FtpChannel)">
            <summary>
            Reads the response from the server after the data channel
            has been disconnected
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OpenPassiveChannel(System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens a PASV data channel
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OpenActiveChannel(System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens a PORT data channel
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.Disconnect">
            <summary>
            Terminates ftp session and cleans up the resources
            being used.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.OnChannelConnected(System.Net.FtpClient.FtpChannel)">
            <summary>
            Upon the initial connection, we will be presented with a banner and status
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.#ctor">
            <summary>
            Initalize a new command channel object.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.WriteToLogStream(System.String)">
            <summary>
            Writes a message to the FTP log stream
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandChannel.WriteLineToLogStream(System.String)">
            <summary>
            Writes a line to the FTP log stream
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.SslMode">
            <summary>
            Sets the type of SSL to use when the EnableSSL property is
            true. The default is Explicit, meaning SSL is negotiated
            after the initial connection, before credentials are sent.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.DataChannelEncryption">
            <summary>
            Enable or disable data channel encryption. This option is only
            applicable when the SslMode property is set to use encryption.
            The default value is true.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.EnablePipelining">
            <summary>
            Gets / sets a value indicating if we can use pipelining techniques
            to talk to the server. If the server allows it, this will help
            improve performance on the command channel with large command transactions.
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpCommandChannel.ResponseReceived">
            <summary>
            Event is fired when a message is received from the server. Useful
            for logging the conversation with the server.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.Capabilities">
            <summary>
            Capabilities of the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.DefaultDataMode">
            <summary>
            The default data mode used for data channels (default: Passive)
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.ResponseType">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.ResponseCode">
            <summary>
            The status code of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.ResponseMessage">
            <summary>
            The message, if any, that the server sent with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.Messages">
            <summary>
            Other informational messages sent from the server
            that are not considered part of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.ResponseStatus">
            <summary>
            General success or failure of the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.LastSocketActivity">
            <summary>
            Gets a the last time data was read or written to the socket.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.NeedsSocketPoll">
            <summary>
            Returns true if the last socket poll was 30 seconds ago. The last poll
            time gets updated everytime data is read or written to the socket.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.MaxPipelineExecute">
            <summary>
            Gets or sets the maximum number of commands that can be
            executed at a time in a pipeline. Once this number is exceeded,
            execution stops and the responses are read. The process repeats
            itself until all of the pending commands have been executed. Setting
            this value to 0 means there is no limit.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.ExecuteList">
            <summary>
            Gets a list of commands in the current pipeline
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.PipelineInProgress">
            <summary>
            Gets a value indicating if a pipeline has been started
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.FtpLogStream">
            <summary>
            Gets or sets a stream to log FTP transactions to. Can be
            used for logging to a file, the console window, or what have you.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandChannel.FtpLogFlushOnWrite">
            <summary>
            Gets or sets a value that indicates if the
            output stream should be flushed everytime
            a log enter is written to it.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpCommandResult">
            <summary>
            The information returned from the server for a given command.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandResult.#ctor(System.Net.FtpClient.FtpCommandChannel)">
            <summary>
            Initalize object
            </summary>
            <param name="chan">The command channel this object is associated with</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseType">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseCode">
            <summary>
            The status code of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseMessage">
            <summary>
            The message, if any, that the server sent with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.Messages">
            <summary>
            Other informational messages sent from the server
            that are not considered part of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseStatus">
            <summary>
            General success or failure of the last command executed
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpFileSystemObject">
            <summary>
            Base class for remote file system objects
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObject._length">
            <summary>
            The size of the object, -1 means it hasn't been loaded.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObject._lastWriteTime">
            <summary>
            The last write time of the object. DateTime.MinValue means
            that is hasn't been loaded.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.GetInfo">
            <summary>
            Tries to load the object information
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.CleanPath(System.String)">
            <summary>
            Fixes directory separators
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.Dispose">
            <summary>
            Cleanup an release resources
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.#ctor(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Create new object lined to the specified client and pointing at the specified path
            </summary>
            <param name="client">The client to link this objec to</param>
            <param name="path">The full path of the remote object</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.Client">
            <summary>
            The FtpClient object this directory is associated with
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.Name">
            <summary>
            The name of this object
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.FullName">
            <summary>
            The full or relative path of this directory on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.Length">
            <summary>
            Gets the file system size of this object if
            applicable.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.LastWriteTime">
            <summary>
            Last modification time
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpException">
            <summary>
            FTP related error
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpException.#ctor(System.String)">
            <summary>
            Initializes the exception object
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpInvalidCertificateException">
            <summary>
            Error validating the SSL certificate of an FTP server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpInvalidCertificateException.#ctor(System.String)">
            <summary>
            Initializes the exception object
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataChannel">
            <summary>
            FTP data channel
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.Execute(System.String,System.Object[])">
            <summary>
            Executes a command on the command channel and sets a status
            in this data channel indicating if the command succeeded or failed
            </summary>
            <param name="cmd"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.ReadLine">
            <summary>
            Reads a line from the FTP channel socket. Use with discretion,
            can cause the code to freeze if you're trying to read data when no data
            is being sent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes off the socket
            </summary>
            <param name="buf"></param>
            <param name="offset"></param>
            <param name="size"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified byte array to the network stream
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.Connect">
            <summary>
            Connects active or passive channels
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.Disconnect(System.Boolean)">
            <summary>
            Disconnects this data channel
            </summary>
            <param name="ignorestatus"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.InitalizeActiveChannel">
            <summary>
            Intializes the active channel socket
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.ConnectActiveChannel">
            <summary>
            Connects the channel
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.Dispose">
            <summary>
            Cleans up any resources the DataChannel was using, also
            terminates any active connections.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataChannel.#ctor(System.Net.FtpClient.FtpCommandChannel)">
            <summary>
            Initialize object
            </summary>
            <param name="cmdchan">The command channel this data channel is associated with</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.CommandChannel">
            <summary>
            The command channel that opened this data channel
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.LocalPort">
            <summary>
            The local port we are going out or listening on
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.LocalIPAddress">
            <summary>
            The local IP address the socket is using
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.RemotePort">
            <summary>
            The report port we are connected to
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.RemoteIPAddress">
            <summary>
            The remote IP address this socket is connected to
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.BaseStream">
            <summary>
            Base network stream, could be NetworkStream or SslStream
            depending on if ssl is enabled.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.IgnoreStatus">
            <summary>
            Gets a value indicating if an exception should be thrown
            if an error response is received on the command channel
            when disconnecting this data channel
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.AssociatedCommandStatus">
            <summary>
            Gets the status of the command associated with this data channel. If you open a
            data channel and execute a command that succeeds, you must set this property to
            true so that when this data channel closes the a response can be read!
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataChannel.SslAuthTargetHost">
            <summary>
            The host to validate the SSL certificate against
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTransferInfo">
            <summary>
            Provides upload / download progress information
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpTransferInfo.#ctor(System.Net.FtpClient.FtpTransferType,System.String,System.Int64,System.Int64,System.Int64,System.DateTime,System.Boolean)">
            <summary>
            Iniatlize the FtpTransferInfo object
            </summary>
            <param name="type">Upload or download</param>
            <param name="file">Remote object path</param>
            <param name="length">Size of the object in bytes</param>
            <param name="resume">Bytes resumed (if this was a resume)</param>
            <param name="transferred">Bytes transfered</param>
            <param name="start">The time the transfer started</param>
            <param name="complete">Value indicating if the transfer is complete</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.TransferType">
            <summary>
            Indicates if the transfer is an upload or download
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.FileName">
            <summary>
            The full path to remote file
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Length">
            <summary>
            The total number of bytes to be transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Resume">
            <summary>
            Gets the location the download was resumed at
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Transferred">
            <summary>
            The number of bytes transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Percentage">
            <summary>
            Percentage of the transfer that has been completed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Start">
            <summary>
            The start time of the transfer
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Now">
            <summary>
            The current time used for calculating bps
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.BytesPerSecond">
            <summary>
            Transfer average
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Complete">
            <summary>
            Gets a value indicating if the transfer is complete
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Cancel">
            <summary>
            Cancels the transfer
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.InvalidCertificateInfo">
            <summary>
            Invalid SSL certification event arguments
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.InvalidCertificateInfo.#ctor(System.Net.FtpClient.FtpChannel)">
            <summary>
            Iniatlizes the object
            </summary>
            <param name="c">The ftp channel this object is associated with. Could
            be FtpCommandChannel or FtpDataChannel</param>
        </member>
        <member name="P:System.Net.FtpClient.InvalidCertificateInfo.Ignore">
            <summary>
            Gets or sets a value indicating if the invalid certificate should be ignored.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.InvalidCertificateInfo.SslPolicyErrors">
            <summary>
            The problems encountered with the certificate
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.InvalidCertificateInfo.SslCertificate">
            <summary>
            The SSL certificate that failed verification
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannelConnected">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannelDisconnected">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannelDisposed">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpInvalidCertificate">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
            <param name="e"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpFile">
            <summary>
            A file on a FTP server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead">
            <summary>
            Opens this file for reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead(System.Int64)">
            <summary>
            Opens this file for reading
            </summary>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead(System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens this file for reading
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead(System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Opens this file for reading
            </summary>
            <param name="mode"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite">
            <summary>
            Opens this file for writing
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite(System.Int64)">
            <summary>
            Opens this file for writing
            </summary>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite(System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens this file for writing
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite(System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Opens this file for writing
            </summary>
            <param name="mode"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download">
            <summary>
            Download this file to the current working directory
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String,System.Int64)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
            <param name="rest">Restart position</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
            <param name="xferMode">ASCII/Binary</param>
            <param name="rest">Restart location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String)">
            <summary>
            Uploads the specified file
            </summary>
            <param name="local"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String,System.Int64)">
            <summary>
            Uploads the specified file 
            </summary>
            <param name="local"></param>
            <param name="rest"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Uploads the specified file
            </summary>
            <param name="local"></param>
            <param name="xferMode"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Uploads the specified file
            </summary>
            <param name="local"></param>
            <param name="xferMode"></param>
            <param name="rest"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Delete">
            <summary>
            Delete this file
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Dispose">
            <summary>
            Cleans up this object's resources
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.#ctor(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Constructs a new FtpFile object
            </summary>
            <param name="cl">The FtpClient to associate this FtpFile with</param>
            <param name="path">The remote path to the file</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.#ctor(System.Net.FtpClient.FtpClient,System.Net.FtpClient.FtpDirectory,System.Net.FtpClient.FtpListItem)">
            <summary>
            Constructs a new FtpFile object
            </summary>
            <param name="cl">The FtpClient to associate this FtpFile with</param>
            <param name="parent">The parent FtpDirectory if any</param>
            <param name="listing">The FtpListItem object that was acquired from parsing flie list from the server.</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpFile.Exists">
            <summary>
            Gets a value indicating if this file exists on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFile.Parent">
            <summary>
            Gets the parent directory.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransferArgs.GetNextReadSize(System.Int32)">
            <summary>
            Gets the appropriate size of the next read for this chunk
            </summary>
            <param name="bufsize"></param>
            <returns></returns>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransferArgs.ChunkSize">
            <summary>
            Gets the size of the chunk this thread is
            responsible for downloading
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransferArgs.Start">
            <summary>
            Gets the starting location for this download
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransferArgs.End">
            <summary>
            Gets the ending location for this download
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransferArgs.Transferred">
            <summary>
            Gets the number of bytes transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransferArgs.Complete">
            <summary>
            Gets a value indicating if this chunk has been completed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransferArgs.FullPath">
            <summary>
            Gets the full path of the file to be transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransferArgs.TransferMode">
            <summary>
            Gets the transfer mode (ASCII/Binary)
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.CheckCapabilities">
            <summary>
            Ensures that the server we're connecting to supports threaded downloads
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.CloneClient">
            <summary>
            Clones the main connection only copying connection infor and options
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.OnInvalidCertificate(System.Net.FtpClient.FtpChannel,System.Net.FtpClient.InvalidCertificateInfo)">
            <summary>
            Calls the invalid certificate event on the main thread's client
            </summary>
            <param name="c"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.Write(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Writes the specified data to the specified position in the file
            </summary>
            <param name="buf"></param>
            <param name="length"></param>
            <param name="position"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.PreAllocateFile(System.IO.Stream)">
            <summary>
            Pre-Allocate file storage to make the transfer faster
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.ReportProgress(System.Net.FtpClient.FtpTransferType,System.String,System.Int64)">
            <summary>
            Calls the TransferProgress event on the main connection
            </summary>
            <param name="type"></param>
            <param name="fullname"></param>
            <param name="read"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.AddException(System.Exception)">
            <summary>
            Adds an exception to the exception list
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.ThreadDownload(System.Object)">
            <summary>
            Worker thread for downloading a specified chunk of data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.WaitForThreads">
            <summary>
            Waits for all of the download threads to finish and
            uses the NOOP command to keep the main connection alive
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.CheckExceptions">
            <summary>
            Checks exceptions from the other threads and combines them
            into one exception.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.Download(System.Net.FtpClient.FtpFile,System.String,System.Net.FtpClient.FtpTransferMode,System.Int64,System.Int32)">
            <summary>
            Downloads the specified file using the specified number of threads
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <param name="mode"></param>
            <param name="rest"></param>
            <param name="threads"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpThreadedTransfer.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Net.FtpClient.FtpTransferMode,System.Int64,System.Int32)">
            <summary>
            Downloads the specified file using the specified number of threads
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <param name="mode"></param>
            <param name="rest"></param>
            <param name="threads"></param>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Client">
            <summary>
            The FTP client used to perform this operation
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Threads">
            <summary>
            The threads being used to carry out the operation
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Exceptions">
            <summary>
            A list of exceptions that were thrown by the work threads, if any
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Stream">
            <summary>
            The input or output stream depending if this is an
            upload or download
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Cancel">
            <summary>
            Abort the transfer
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Start">
            <summary>
            Gets the time this download started
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Size">
            <summary>
            Gets the size of the file being transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Transferred">
            <summary>
            Gets the number of bytes that have been transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpThreadedTransfer.Resume">
            <summary>
            Gets the location this download was resumed at.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDirectory">
            <summary>
            Represents a directory on a FTP server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Create">
            <summary>
            Creates this directory on the server. Exception thrown 
            if the directory already exists.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Net.FtpClient.FtpFile)">
            <summary>
            Deletes the specified file and removes it from the list of files in this
            directory if it's there
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Net.FtpClient.FtpDirectory)">
            <summary>
            Deletes the specified directory and removes it from the list of directories
            in this directory if it's there
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Net.FtpClient.FtpDirectory,System.Boolean)">
            <summary>
            Deletes the specified directory and removes it from the list of directories
            in this directory if it's there
            </summary>
            <param name="dir"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete">
            <summary>
            Delete this directory, throw exception if not empty.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Boolean)">
            <summary>
            Delete this directory and all files and directories beneath it
            </summary>
            <param name="recursive"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.DirectoryExists(System.String)">
            <summary>
            Checks if the specified directory exists. Will fail
            if the server doesn't support MLST
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.FileExists(System.String)">
            <summary>
            Checks if the specified file exists. Will fail
            if the server doesn't support MLST
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.CreateDirectory(System.String)">
            <summary>
            Creates the specified sub directory
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.LoadListing">
            <summary>
            Loads the file and directory listing
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Dispose">
            <summary>
            Clean up this object and release all of it's resources.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.#ctor(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Initialize a new object representing a directory on the FTP server
            </summary>
            <param name="cl">The client this directory will be associated with</param>
            <param name="path">The full path of the object on the server</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.#ctor(System.Net.FtpClient.FtpClient,System.Net.FtpClient.FtpDirectory,System.Net.FtpClient.FtpListItem)">
            <summary>
            Initialize a new object representing a directory on the FTP server
            </summary>
            <param name="cl">The client this object is associated with</param>
            <param name="parent">The parent directory (if any)</param>
            <param name="listing">The file listing object that was parsed to get this object's data</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Exists">
            <summary>
            Gets a value indicating if this directory exists on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Length">
            <summary>
            Directory size will always be 0.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.LastWriteTime">
            <summary>
            Last modification time
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Directories">
            <summary>
            A list of directories within this directory
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Files">
            <summary>
            A list of files within this directory
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Parent">
            <summary>
            Gets the parent directory. If this is the top level directory, this property will be null.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpFileSystemObjectList`1">
            <summary>
            List of FtpFileSystemObject's
            </summary>
            <typeparam name="FtpFileSystemObject">FtpFile / FtpDirectory</typeparam>
        </member>
        <member name="T:System.Net.FtpClient.FtpTransferProgress">
            <summary>
            FtpTransferProgress delegate
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpClient">
            <summary>
            FtpClient library
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.String,System.String)">
            <summary>
            Connect using the specified username and password
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.String,System.String,System.String)">
            <summary>
            Connect using the specified username and password to the specified server
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.String,System.String,System.String,System.Int32)">
            <summary>
            Connect using the specified username and password to the specified server on the specified port
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Login(System.Net.FtpClient.FtpChannel)">
            <summary>
            This is the ConnectionReady event handler. It performs the FTP login
            if a connection to the server has been made.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.NoOp">
            <summary>
            Sends the NoOp command. Does nothing other than send a command to the
            server and get a response.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetRawListing">
            <summary>
            Gets a raw directory listing of the current working directory. Prefers
            the MLSD command to LIST if it's available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetRawListing(System.String)">
            <summary>
            Returns a raw file listing, preferring to use the MLSD command
            over LIST if it is available
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>string array of the raw listing</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetRawListing(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Returns a raw file listing using the specified LIST type
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="type"></param>
            <returns>string array of the raw listing</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing">
            <summary>
            Gets a file listing, parses it, and returns an array of FtpListItem 
            objects that contain the parsed information. Supports MLSD/LIST (DOS and UNIX) formats.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String)">
            <summary>
            Gets a file listing, parses it, and returns an array of FtpListItem 
            objects that contain the parsed information. Supports MLSD/LIST (DOS and UNIX) formats.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Gets a file listing, parses it, and returns an array of FtpListItem 
            objects that contain the parsed information. Supports MLSD/LIST (DOS and UNIX) formats.
            </summary>
            <param name="path"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetWorkingDirectory(System.String)">
            <summary>
            Changes the current working directory
            </summary>
            <param name="path">The full or relative (to the current directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time if the server supports the MDTM command. If the
            server does not support the MDTM NotImplementedException is thrown.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>DateTime/DateTime.MinValue if there was a problem parsing the date</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.ParseLastWriteTime(System.String)">
            <summary>
            Parses the last write time values from the server
            </summary>
            <param name="mdtm">The string value to parse</param>
            <returns>A DateTime object representing what was parsed, DateTime.MinValue if there was a failure</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetFileSize(System.String)">
            <summary>
            Gets the size of the specified file. Prefer the MLST command since some servers don't
            support large files. If there are any errors getting the file size, 0 will be returned
            rather than throwing an exception.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>The file size, 0 if there was a problem parsing the size</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.RemoveDirectory(System.String)">
            <summary>
            Removes the specified directory
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.RemoveFile(System.String)">
            <summary>
            Removes the specified file
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetObjectInfo(System.String)">
            <summary>
            Gets an FTP list item representing the specified file system object
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DirectoryExists(System.String)">
            <summary>
            Checks if the specified directory exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.FileExists(System.String)">
            <summary>
            Checks if the specified file exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Rename(System.String,System.String)">
            <summary>
            Renames the specified object
            </summary>
            <param name="from">The full or relative (to the current working directory) path of the existing file</param>
            <param name="to">The full or relative (to the current working directory) path of the new file</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Int64)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="xferMode">ASCII/Binary</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="xferMode">ASCII/Binary</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String)">
            <summary>
            Opens a file for writing. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Int64)">
            <summary>
            Opens a file for writing. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Opens a file for writing. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="xferMode">ASCII/Binary</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Opens a file for writing. If you want the existing file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="xferMode">ASCII/Binary</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OnTransferProgress(System.Net.FtpClient.FtpTransferInfo)">
            <summary>
            Fires the TransferProgress event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String)">
            <summary>
            Downloads a file from the server to the current working directory
            </summary>
            <param name="remote"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">The remote file to download</param>
            <param name="ostream">The stream to download the file to</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">The stream to download the file to</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.IO.Stream,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">The stream to download the file to</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String,System.Net.FtpClient.FtpTransferMode,System.Int64,System.Int32)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <param name="xferMode"></param>
            <param name="rest"></param>
            <param name="threads"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile)">
            <summary>
            Downloads a file from the server to the current working directory
            </summary>
            <param name="remote"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote"></param>
            <param name="ostream">The stream to write the file to</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">Local path of the file</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">The stream to download the file to</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Downloads the specified file from the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <param name="xferMode"></param>
            <param name="rest"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Downloads the remote file to the specified stream
            </summary>
            <param name="remote"></param>
            <param name="ostream"></param>
            <param name="xferMode"></param>
            <param name="rest"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String,System.Net.FtpClient.FtpTransferMode,System.Int64,System.Int32)">
            <summary>
            Downloads the specified file using the specified number of threads
            to complete the operation
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <param name="xferMode"></param>
            <param name="rest"></param>
            <param name="threads"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Net.FtpClient.FtpTransferMode,System.Int64,System.Int32)">
            <summary>
            Downloads the specified file using the specified number of threads
            to complete the operation
            </summary>
            <param name="remote"></param>
            <param name="ostream"></param>
            <param name="xferMode"></param>
            <param name="rest"></param>
            <param name="threads"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String)">
            <summary>
            Uploads a file to the server in the current working directory
            </summary>
            <param name="local"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.String)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream"></param>
            <param name="remote"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">Stream to read the file from</param>
            <param name="remote">Remote path of the file</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.String,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">The stream to read the file from</param>
            <param name="remote">Remote path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Local path of the file</param>
            <param name="local">Remote path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">Stream to read the file from</param>
            <param name="remote"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">The file to upload</param>
            <param name="remote">Remote path of the file</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpTransferMode)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">The stream to upload</param>
            <param name="remote">Remote path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Local path of the file</param>
            <param name="local">Remote path of the file</param>
            <param name="xferMode">ASCII/Binary</param>
            <param name="rest">Resume location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpTransferMode,System.Int64)">
            <summary>
            Uploads a stream to the specified remote file
            </summary>
            <param name="istream"></param>
            <param name="remote"></param>
            <param name="xferMode"></param>
            <param name="rest"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor(System.String,System.String)">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
            <param name="port"></param>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.Username">
            <summary>
            The username to authenticate with
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.Password">
            <summary>
            The password to authenticate with
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.DefaultFileSystemBufferSize">
            <summary>
            Gets or sets the default buffer size to use when
            allocating local file storage. Only used in threaded
            downloads.
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpClient.TransferProgress">
            <summary>
            Event fired from Download() and Upload() methods
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.CurrentDirectory">
            <summary>
            Gets the current working directory. Use the SetWorkingDirectory() method
            to change the working directory.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.System">
            <summary>
            Gets the system type that we're connected to
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTraceListener">
            <summary>
            Adds a trace lister for System.Net.FtpClient output 
            </summary>
        </member>
    </members>
</doc>
